##################################################
# Name: release.yaml
# Description: Workflow to create and publish to a GitHub release
##################################################

name: Release

on:
  # Treating approved PRs into trunk as "pre-releases"
  pull_request_review:
    branches:
      - "trunk"
    types:
      - submitted
    paths-ignore:
      - "docs/**"
      - "*.md"
  # Treating merged PRs into trunk as "releases"
  push:
    branches:
      - "trunk"
    paths-ignore:
      - "docs/**"
      - "*.md"

env:
  PROJECT: ${{ github.repository }}

  REGISTRY: ghcr.io

  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PAT }}

defaults:
  run:
    shell: bash

jobs:
  #########################
  # Create a GitHub Release
  #########################

  create_release:
    name: Create GitHub Release

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30
    continue-on-error: false

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository with all history and tags
        uses: actions/checkout@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_REPOS }}
        with:
          fetch-depth: 0
          submodules: false
          clean: true
          persist-credentials: true

      - id: prep_release
        name: Prepare for Release
        uses: salt-labs/action-release-prepper@trunk
        with:
          loglevel: "INFO"
          tag_enable: "TRUE"
          tag_force: "FALSE"
          changelog_enable: "TRUE"
          git_pretty_format: "* %h %G? %aN - %s"
          calver_enable: "TRUE"
          calver_scheme: "YYYY.MM.GEN"
          calver_split: "."
          calver_split_mod: "."
          calver_timezone: "Australia/Sydney"
          semver_enable: "TRUE"
          semver_type: "patch"
          semver_prefix: "v"

      - id: create_release_prerelease
        name: Create Pre-Release
        if: github.event.review.state == 'approved'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prep_release.outputs.calver }}
          release_name: ${{ steps.prep_release.outputs.calver }}
          body: |
            # ${{ steps.prep_release.outputs.repo_name }} changelog

            ${{ steps.prep_release.outputs.changelog }}

          draft: false
          prerelease: true

      - id: create_release
        if: github.event_name == 'push' && contains( github.ref, 'trunk' )
        name: Create Release Draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prep_release.outputs.calver }}
          release_name: ${{ steps.prep_release.outputs.calver }}
          body: |
            # ${{ steps.prep_release.outputs.repo_name }} changelog

            ${{ steps.prep_release.outputs.changelog }}

          draft: true
          prerelease: false

      - id: test_dockerfile
        name: Test for a Dockerfile
        shell: bash
        run: |
          if [ -f "Dockerfile" ];
          then
            echo '::set-output name=publish::TRUE'
          else
            # TODO: Fix override
            echo '::set-output name=publish::TRUE'
          fi

    outputs:
      # Prep-Release
      calver: ${{ steps.prep_release.outputs.calver }}
      semver: ${{ steps.prep_release.outputs.semver }}
      changelog: ${{ steps.prep_release.outputs.changelog }}
      repo_owner: ${{ steps.prep_release.outputs.repo_owner }}
      repo_name: ${{ steps.prep_release.outputs.repo_name }}

      # Pre-Release
      upload_url_prerelease: ${{ steps.create_release_prerelease.outputs.upload_url }}

      # Release
      upload_url: ${{ steps.create_release.outputs.upload_url }}

      # Container
      publish_container: ${{ steps.test_dockerfile.outputs.publish }}
